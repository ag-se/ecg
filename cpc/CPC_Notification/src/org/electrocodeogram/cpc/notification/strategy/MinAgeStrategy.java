package org.electrocodeogram.cpc.notification.strategy;


import java.util.Date;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.electrocodeogram.cpc.core.api.data.IClone;
import org.electrocodeogram.cpc.core.api.provider.notification.IEvaluationResult.Action;
import org.electrocodeogram.cpc.notification.CPCNotificationPlugin;
import org.electrocodeogram.cpc.notification.api.strategy.INotificationEvaluationStrategy;
import org.electrocodeogram.cpc.notification.api.strategy.INotificationEvaluationStrategyResult;
import org.electrocodeogram.cpc.notification.preferences.CPCPreferenceConstants;
import org.electrocodeogram.cpc.notification.provider.EvaluationResult;


/**
 * A simple {@link INotificationEvaluationStrategy} which prevents notifications for clones
 * which were created only recently.
 * <p>
 * Rationale:
 * <blockquote>
 * 	The user probably still remembers that he copy and pasted this code section and will
 * 	handle propagation of modifications on his own. Any warning generated by CPC would
 * 	be superfluous.
 * </blockquote>
 * 
 * @author vw
 */
public class MinAgeStrategy implements INotificationEvaluationStrategy
{
	private static final Log log = LogFactory.getLog(MinAgeStrategy.class);

	/**
	 * Weight of the {@link Action#MODIFIED} result returned, if some modification is detected.
	 */
	private static final double MODIFIED_RESULT_WEIGHT = 50.0;

	public MinAgeStrategy()
	{
		log.trace("MinAgeStrategy()");
	}

	/*
	 * (non-Javadoc)
	 * @see org.electrocodeogram.cpc.notification.api.strategy.INotificationEvaluationStrategy#evaluateModification(org.electrocodeogram.cpc.core.api.data.IClone, java.util.List, boolean, org.electrocodeogram.cpc.notification.api.strategy.INotificationEvaluationStrategyResult)
	 */
	@Override
	public Status evaluateModification(IClone modifiedClone, List<IClone> groupMembers, boolean initialEvaluation,
			INotificationEvaluationStrategyResult result)
	{
		if (log.isTraceEnabled())
			log.trace("evaluateModification() - modifiedClone: " + modifiedClone + ", groupMembers: " + groupMembers
					+ ", initialEvaluation: " + initialEvaluation + ", result: " + result);
		assert (modifiedClone != null && groupMembers != null && groupMembers.size() >= 2 && result != null);

		long age = (new Date()).getTime() - modifiedClone.getCreationDate().getTime();

		if (log.isTraceEnabled())
			log.trace("evaluateModification() - age of clone: " + (age / 1000) + "s (" + (age / 1000 / 60 / 60 / 24)
					+ " days)");

		long minAge = CPCNotificationPlugin.getDefault().getPluginPreferences().getInt(
				CPCPreferenceConstants.PREF_NOTIFICATION_STRATEGY_MINAGE_MINAGEINHOURS) * 60 * 60 * 1000;
		if (age < minAge)
		{
			if (log.isTraceEnabled())
				log.trace("evaluateModification() - clone is too young, aborting strategy processing - age: " + age
						+ ", minAge: " + minAge);

			/*
			 * Once we reach this point the clone has passed all similarity "filters".
			 * This means that it was modified in some way.
			 */
			result.add(new EvaluationResult(Action.MODIFIED, MODIFIED_RESULT_WEIGHT, ""));
			return Status.BREAK;
		}

		log.trace("evaluateModification() - clone is old enough, strategy SKIPPED.");

		//nothing to do.
		return Status.SKIPPED;
	}

}
