package org.electrocodeogram.cpc.core.api.hub.event;


import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.eclipse.jface.text.IDocument;


/**
 * This event is generated by the <em>CPC Sensor</em> module, whenever a text file is opened or closed.
 * It does not matter whether the file was opened in an editor (i.e. user opening the file) or in the
 * background (i.e. refactoring or source reformat on the entire project).
 * 
 * @author vw
 */
public class EclipseFileAccessEvent extends EclipseEvent
{
	private static Log log = LogFactory.getLog(EclipseFileAccessEvent.class);

	/**
	 * The type of an {@link EclipseFileAccessEvent}.
	 */
	public enum Type
	{
		/**
		 * The file was just opened.
		 */
		OPENED,

		/**
		 * The file was just closed.
		 */
		CLOSED
	}

	/**
	 * Creates a new {@link EclipseFileAccessEvent} for the given
	 * user and project. 
	 * 
	 * @param user the current user, never null.
	 * @param project the project for the file affected by this event, never null.
	 */
	public EclipseFileAccessEvent(String user, String project)
	{
		super(user, project);

		log.trace("EclipseFileAccessEvent(...)");
	}

	protected Type type;
	protected boolean dirty = false;
	protected IDocument document;

	/**
	 * Retrieves the type of access (opened/closed).
	 * 
	 * @return the type of access, never null.
	 */
	public Type getType()
	{
		return type;
	}

	/**
	 * Sets the type of access (opened/closed).
	 * <p>
	 * This is a required value.
	 * 
	 * @param type the type of access, never null.
	 */
	public void setType(Type type)
	{
		if (log.isTraceEnabled())
			log.trace("setType(): " + type);
		assert (type != null);

		checkSeal();

		this.type = type;
	}

	/**
	 * Checks whether the underlying buffer was still dirty when the file was closed.
	 * <p>
	 * This value has no meaning for events which are not of type {@link Type#CLOSED}.
	 * 
	 * @return <em>true</em> if buffer was dirty, <em>false</em> otherwise.
	 */
	public boolean isDirty()
	{
		return dirty;
	}

	/**
	 * Specifies whether the underlying buffer was still dirty when the file was closed.
	 * <p>
	 * This value has no meaning for events which are not of type {@link Type#CLOSED}.
	 * <br>
	 * This is an optional value, the default value is <em>false</em>.
	 * 
	 * @param dirty <em>true</em> if buffer was dirty, <em>false</em> otherwise.
	 */
	public void setDirty(boolean dirty)
	{
		this.dirty = dirty;
	}

	/**
	 * Retrieves the {@link IDocument} instance which was created for this file.
	 * 
	 * @return the document corresponding to the file, never null.
	 */
	public IDocument getDocument()
	{
		return document;
	}

	/**
	 * Sets the {@link IDocument} instance which was created for this file.
	 * <p>
	 * This is a required value.
	 * 
	 * @param document the document corresponding to the file, never null.
	 */
	public void setDocument(IDocument document)
	{
		if (log.isTraceEnabled())
			log.trace("setDocument(): " + document);
		assert (document != null);

		checkSeal();

		this.document = document;
	}

	/*
	 * (non-Javadoc)
	 * @see org.electrocodeogram.cpc.core.api.hub.event.EclipseEvent#isValid()
	 */
	@Override
	public boolean isValid()
	{
		if (type == null || document == null)
			return false;

		return super.isValid();
	}

	/*
	 * (non-Javadoc)
	 * @see org.electrocodeogram.cpc.core.api.hub.event.CPCEvent#toString()
	 */
	@Override
	public String toString()
	{
		return "EclipseFileAccessEvent[" + super.subToString() + ", type: " + type + ", dirty: " + dirty + "]";
	}
}
