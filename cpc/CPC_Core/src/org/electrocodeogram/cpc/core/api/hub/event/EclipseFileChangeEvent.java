package org.electrocodeogram.cpc.core.api.hub.event;


import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.eclipse.core.resources.IResourceChangeListener;
import org.electrocodeogram.cpc.core.api.hub.registry.IEventHubListener;
import org.electrocodeogram.cpc.core.api.provider.store.IStoreProvider;
import org.electrocodeogram.cpc.core.utils.CoreConfigurationUtils;


/**
 * This event is generated whenever a file is moved or removed.
 * <br>
 * Package/folder renames/moves and project renames will also generate corresponding events
 * of this type for all contained files.
 * <br>
 * This event is only generated for files which are of interest to CPC
 * (see: {@link CoreConfigurationUtils#isSupportedFile(String)}). 
 * <p>
 * Due to performance considerations this event will not be generated for files which are
 * only modified. If you require knowledge about simple file content modifications, you
 * should register your own {@link IResourceChangeListener} directly with Eclipse.
 * <p>
 * Generated by <em>CPCResourceChangeListener</em> and by the {@link IEventHubListener} which
 * consumes {@link EclipseFileChangeEvent}s and updates the {@link IStoreProvider}.
 * <br>
 * See also: {@link EclipseFileChangeEvent#setPostStoreProviderMoveUpdate(boolean)}.
 * 
 * @author vw
 */
public class EclipseFileChangeEvent extends EclipseEvent
{
	private static Log log = LogFactory.getLog(EclipseFileChangeEvent.class);

	/**
	 * The type of the {@link EclipseFileChangeEvent}. 
	 */
	public enum Type
	{
		/**
		 * The file was renamed or moved.
		 */
		MOVED,

		/**
		 * The file was removed.
		 */
		REMOVED
	}

	protected Type type;
	protected String newProject;
	protected String newFilePath;
	protected boolean postStoreProviderMoveUpdate = false;

	/**
	 * Creates a new {@link EclipseFileChangeEvent} for the given
	 * user and project. 
	 * 
	 * @param user the current user, never null.
	 * @param project the project for the file affected by this event, never null.
	 */
	public EclipseFileChangeEvent(String user, String project)
	{
		super(user, project);

		log.trace("EclipseFileChangeEvent(...)");
	}

	/**
	 * Retrieves the type of this event.
	 * 
	 * @return the type of this event, never null.
	 */
	public Type getType()
	{
		assert (type != null);
		return type;
	}

	/**
	 * Sets the type of this event.
	 * 
	 * @param type the type of this event, never null.
	 */
	public void setType(Type type)
	{
		if (log.isTraceEnabled())
			log.trace("setType(): " + type);
		assert (type != null);

		checkSeal();

		this.type = type;
	}

	/**
	 * Retrieves the new project name for this file after a move.
	 * 
	 * @return new project name after move, NULL if type is not {@link EclipseFileChangeEvent.Type#MOVED}, never null otherwise.
	 */
	public String getNewProject()
	{
		assert ((Type.MOVED.equals(type) && newProject != null) || (!Type.MOVED.equals(type) && newProject == null));
		return newProject;
	}

	/**
	 * Sets the new project name for this file after a move.
	 * <br>
	 * Must not be set if the type of this event is not {@link EclipseFileChangeEvent.Type#MOVED}.
	 * Required and non-null otherwise. 
	 * 
	 * @param newProject new project name after move, may be NULL.
	 */
	public void setNewProject(String newProject)
	{
		if (log.isTraceEnabled())
			log.trace("setNewProject(): " + newProject);

		checkSeal();

		this.newProject = newProject;
	}

	/**
	 * Retrieves the new relative path of this file after a move.
	 * <br>
	 * The path is relative to the project returned by {@link EclipseFileChangeEvent#getNewProject()}.
	 * 
	 * @return new project relative path after move, NULL if type is not {@link EclipseFileChangeEvent.Type#MOVED}, never null otherwise.
	 */
	public String getNewFilePath()
	{
		assert ((Type.MOVED.equals(type) && newFilePath != null) || (!Type.MOVED.equals(type) && newFilePath == null));
		return newFilePath;
	}

	/**
	 * Sets the new relative path of this file after a move.
	 * <br>
	 * Must not be set if the type of this event is not {@link EclipseFileChangeEvent.Type#MOVED}.
	 * Required and non-null otherwise. 
	 * 
	 * @param newFilePath new project relative path after move, may be null.
	 */
	public void setNewFilePath(String newFilePath)
	{
		if (log.isTraceEnabled())
			log.trace("setNewFilePath(): " + newFilePath);

		checkSeal();

		this.newFilePath = newFilePath;
	}

	/**
	 * True if this event was generated <b>after</b> the {@link IStoreProvider} has been updated to
	 * reflect the new location of the file corresponding to this event.
	 * <br>
	 * By default this value is <em>false</em>.
	 * <p>
	 * <b>NOTE:</b> The CPC Sensor will <b>not</b> generate events with this value set to <em>true</em>.
	 * 		<br>
	 * 		It is up to the code which processes {@link EclipseFileChangeEvent}s and updates the
	 * 		{@link IStoreProvider} to create a <b>new event</b> with this value being set to <em>true</em>. 
	 * 
	 * @return <em>true</em> if {@link IStoreProvider} was already updated or <em>false</em> if this
	 * 		can not be guaranteed. <em>false</em> is also returned for all other event types besides
	 * 		{@link EclipseFileChangeEvent.Type#MOVED}.
	 */
	public boolean isPostStoreProviderMoveUpdate()
	{
		return postStoreProviderMoveUpdate;
	}

	/**
	 * To be used only by the code which updates the {@link IStoreProvider} to reflect a file move.
	 * Typically an {@link IEventHubListener} which consumes {@link EclipseFileChangeEvent}s.
	 * <p>
	 * The code which sets this value to <em>true</em> must be able to guarantee that the new event
	 * will never be dispatched before the original {@link EclipseFileChangeEvent} with the value
	 * <em>false</em> was dispatched.
	 * <p>
	 * <b>NOTE:</b> The new {@link EclipseFileChangeEvent} should be generated by calling
	 * 		{@link EclipseFileChangeEvent#clone()} and not by manually copying over all fields.
	 * 
	 * @see EclipseFileChangeEvent#isPostStoreProviderMoveUpdate()
	 * @see EclipseFileChangeEvent#clone() 
	 */
	public void setPostStoreProviderMoveUpdate(boolean postStoreProviderUpdate)
	{
		this.postStoreProviderMoveUpdate = postStoreProviderUpdate;
	}

	/**
	 * Clones this {@link EclipseFileChangeEvent} instance.
	 * 
	 * @throws CloneNotSupportedException never thrown 
	 * 
	 * @see EclipseFileChangeEvent#setPostStoreProviderMoveUpdate(boolean)
	 */
	@Override
	public Object clone() throws CloneNotSupportedException
	{
		return super.clone();
	}

	/*
	 * (non-Javadoc)
	 * @see org.electrocodeogram.cpc.core.api.hub.event.EclipseEvent#isValid()
	 */
	@Override
	public boolean isValid()
	{
		if (type == null)
			return false;

		if ((Type.MOVED.equals(type) && newFilePath == null) || (!Type.MOVED.equals(type) && newFilePath != null))
			return false;

		if ((Type.MOVED.equals(type) && newProject == null) || (!Type.MOVED.equals(type) && newProject != null))
			return false;

		return super.isValid();
	}

	/*
	 * (non-Javadoc)
	 * @see org.electrocodeogram.cpc.core.api.hub.event.CPCEvent#toString()
	 */
	@Override
	public String toString()
	{
		return "EclipseFileChangeEvent[" + super.subToString() + ", type: " + type + ", newProject: " + newProject
				+ ", newFilePath: " + newFilePath + ", postSPup: " + postStoreProviderMoveUpdate + "]";
	}
}
