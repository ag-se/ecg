package org.electrocodeogram.cpc.core.api.hub.event;


import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.electrocodeogram.cpc.core.api.data.IClone;
import org.electrocodeogram.cpc.core.api.data.ICloneFile;
import org.electrocodeogram.cpc.core.api.provider.store.IStoreProvider;


/**
 * This event is generated by the {@link IStoreProvider} whenever the clone data is
 * persisted to stable storage.
 * <br>
 * Typically this happens whenever the user saves a file.
 * This event is also generated, if the clone data for a file is purged.
 * <p>
 * The {@link CloneEvent#getCloneFile()} value will be NULL if all clone data was purged.
 * <p>
 * <b>IMPORTANT:</b> This event is generated from within an exclusive write lock block inside of
 * the {@link IStoreProvider}. A receiver is <b>not allowed</b> to make <u>any</u> calls
 * to the store provider for the duration of the event dispatching.
 * <br>
 * Furthermore, as an exclusive lock is held, all receivers are urged to return as fast as possible.<br/>
 * Care should be taken to ensure that a receiver does not inadvertently trigger events which might
 * lead to not absolutely necessary work being done during the lifetime of this event <i>(and therefore
 * the exclusive write lock)</i>.
 * 
 * @author vw
 * 
 * @see IStoreProvider#persistData(ICloneFile)
 * @see IStoreProvider#purgeData(ICloneFile, boolean)
 */
public class ClonePersistenceEvent extends CloneEvent
{
	private static final Log log = LogFactory.getLog(ClonePersistenceEvent.class);

	private List<IClone> clones;

	/**
	 * Creates a new {@link ClonePersistenceEvent} for the given file.
	 *  
	 * @param cloneFile the file for which clone data was persisted, never null.
	 */
	public ClonePersistenceEvent(ICloneFile cloneFile)
	{
		super(cloneFile);

		if (log.isTraceEnabled())
			log.trace("ClonePersistenceEvent() - cloneFile: " + cloneFile);
	}

	/**
	 * Retrieves a list with the new persisted clone data for this file.
	 * <br>
	 * The list may be empty, if no clones are persisted for this file.
	 * <p>
	 * <b>IMPORTANT:</b> the {@link IClone} instances may <b>not</b> me modified in any way.
	 * 
	 * @return a list with the latest versions of all {@link IClone} instances for this file, never null.
	 */
	public List<IClone> getClones()
	{
		return clones;
	}

	/**
	 * Sets the list of persisted clones.
	 * <p>
	 * <b>NOTE:</b> For performance reasons {@link IClone} instances do not need to be cloned
	 * or sealed for use in this event. Receivers of this event are not allowed to modify the
	 * instances in any way.
	 * 
	 * @param clones a list with the latest versions of all {@link IClone} instances for this file, never null.
	 */
	public void setClones(List<IClone> clones)
	{
		if (log.isTraceEnabled())
			log.trace("setClones(): " + clones);
		assert (clones != null);

		checkSeal();

		this.clones = clones;
	}

	/*
	 * (non-Javadoc)
	 * @see org.electrocodeogram.cpc.core.api.hub.event.CPCEvent#toString()
	 */
	@Override
	public String toString()
	{
		return "ClonePersistenceEvent[" + subToString() + ", clones: " + clones + "]";
	}

}
