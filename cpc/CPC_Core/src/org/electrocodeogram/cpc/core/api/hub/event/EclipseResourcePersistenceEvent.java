package org.electrocodeogram.cpc.core.api.hub.event;


import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.eclipse.jface.text.IDocument;


/**
 * This event is generated by the <em>CPC Sensor</em> module, whenever a documents persistence state changes,
 * i.e. when a file is saved or reverted.
 * <br>
 * This event provides information about the type of persistence event as well as
 * whether the document and whether it is currently open in an editor window.
 * 
 * @author vw
 */
public class EclipseResourcePersistenceEvent extends EclipseEvent
{
	private static Log log = LogFactory.getLog(EclipseResourcePersistenceEvent.class);

	/**
	 * The type of the {@link EclipseResourcePersistenceEvent}. 
	 */
	public enum Type
	{
		/**
		 * The file was saved.
		 */
		SAVED,

		/**
		 * The file was reverted to its prior persisted state.
		 */
		REVERTED
	}

	protected Type type;
	protected boolean openInEditor;
	private boolean openInEditorWasSet;
	protected IDocument document;

	/**
	 * Creates a new {@link EclipseResourcePersistenceEvent} for the given
	 * user and project. 
	 * 
	 * @param user the current user, never null.
	 * @param project the project for the file affected by this event, never null.
	 */
	public EclipseResourcePersistenceEvent(String user, String project)
	{
		super(user, project);

		log.trace("EclipseResourcePersistenceEvent(...)");
	}

	/**
	 * Retrieves the type of this event.
	 * 
	 * @return the type of this event, never null.
	 */
	public Type getType()
	{
		return type;
	}

	/**
	 * Sets the type of this event.
	 * <p>
	 * This is a required value.
	 * 
	 * @param type the type of this event, never null.
	 */
	public void setType(Type type)
	{
		if (log.isTraceEnabled())
			log.trace("setType(): " + type);
		assert (type != null);

		checkSeal();

		this.type = type;
	}

	/**
	 * Indicates whether the file corresponding to this event is currently open
	 * in an editor window.
	 * <br>
	 * This can be used to distinguish between automatic background actions and
	 * user initiated operations.
	 * 
	 * @return <em>true</em> if the file is currently open in an editor, <em>false</em> otherwise.
	 */
	public boolean isOpenInEditor()
	{
		return openInEditor;
	}

	/**
	 * Specifies whether the file corresponding to this event is currently open
	 * in an editor window.
	 * <p>
	 * This is a required value.
	 * 
	 * @param openInEditor <em>true</em> if the file is currently open in an editor, <em>false</em> otherwise.
	 */
	public void setOpenInEditor(boolean openInEditor)
	{
		if (log.isTraceEnabled())
			log.trace("setOpenInEditor(): " + openInEditor);

		checkSeal();

		this.openInEditor = openInEditor;
		this.openInEditorWasSet = true;
	}

	/**
	 * Retrieves the {@link IDocument} instance which corresponds to this event.
	 * 
	 * @return the document underlying this event, never null.
	 */
	public IDocument getDocument()
	{
		return document;
	}

	/**
	 * Sets the {@link IDocument} instance which corresponds to this event.
	 * <p>
	 * This is a required value.
	 * 
	 * @param document the document underlying this event, never null.
	 */
	public void setDocument(IDocument document)
	{
		this.document = document;
	}

	/*
	 * (non-Javadoc)
	 * @see org.electrocodeogram.cpc.core.api.hub.event.EclipseEvent#isValid()
	 */
	@Override
	public boolean isValid()
	{
		if (type == null || document == null)
			return false;

		if (!openInEditorWasSet)
			return false;

		return super.isValid();
	}

	/*
	 * (non-Javadoc)
	 * @see org.electrocodeogram.cpc.core.api.hub.event.CPCEvent#toString()
	 */
	@Override
	public String toString()
	{
		return "EclipseResourcePersistenceEvent[" + super.subToString() + ", type: " + type + ", openInEditor: "
				+ openInEditor + ", document: " + document + "]";
	}
}
