package org.electrocodeogram.cpc.core.api.hub.event;


import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.electrocodeogram.cpc.core.api.data.IClone;
import org.electrocodeogram.cpc.core.api.data.ICloneFile;
import org.electrocodeogram.cpc.core.api.provider.notification.IEvaluationResult;


/**
 * Notification event object for clone modification warnings. Send whenever some module detected
 * that a recent clone content modification might have introduced update anomalies.
 * <p>
 * This event type is typically generated by the <em>CPC Notification</em> module.
 * <br>
 * However, other modules are allowed to generate events of this type too.
 * <p>
 * The <em>CPC Notification UI</em> module will listen to events of this type and will
 * display them to the user in some appropriate way. Other modules may also listen
 * to this event and may initiate their own actions.
 * 
 * @author vw
 */
public class CloneNotificationEvent extends CloneEvent
{
	private static final Log log = LogFactory.getLog(CloneNotificationEvent.class);

	/**
	 * Possible presentation styles for this notification event.
	 * <br>
	 * Closely related to {@link IEvaluationResult.Action}.
	 * 
	 * @see IEvaluationResult
	 */
	public enum Type
	{
		/**
		 * @see IEvaluationResult.Action#NOTIFY
		 */
		NOTIFY,

		/**
		 * @see IEvaluationResult.Action#WARN
		 */
		WARN,

		/**
		 * Similar to {@link Type#NOTIFY}.
		 * <br>
		 * However, this type indicates that the user should not be notified
		 * instantly but that the notification should be queued and that the
		 * modification should be reevaluated once the clone modification
		 * has finished.
		 * <br>
		 * There are multiple potential approaches to this problem.
		 * <br>
		 * I.e. notifications could be delayed until the user closes the corresponding
		 * editor or until the clone or the file it is located in has not been
		 * modified for a specific amount of time. 
		 */
		DELAY_NOTIFY,

		/**
		 * Similar to {@link Type#WARN}.
		 * 
		 * @see Type#DELAY_NOTIFY
		 */
		DELAY_WARN
	}

	protected IClone modifiedClone;
	protected Type type;
	protected double weight;
	protected String message;

	/**
	 * Creates a new {@link CloneNotificationEvent} for the given file.
	 * 
	 * @param cloneFile the file which contains the affected clone, never null.
	 */
	public CloneNotificationEvent(ICloneFile cloneFile)
	{
		super(cloneFile);

		if (log.isTraceEnabled())
			log.trace("CloneNotificationEvent() - cloneFile: " + cloneFile);
	}

	/**
	 * Retrieves the clone instance which triggered this event.
	 * 
	 * @return the modified clone, never null.
	 */
	public IClone getModifiedClone()
	{
		return modifiedClone;
	}

	/**
	 * Sets the clone instance which triggered this event.
	 * <p>
	 * This is a required value.
	 * 
	 * @param modifiedClone the modified clone, never null.
	 */
	public void setModifiedClone(IClone modifiedClone)
	{
		if (log.isTraceEnabled())
			log.trace("setModifiedClone(): " + modifiedClone);
		assert (modifiedClone != null);

		checkSeal();

		this.modifiedClone = modifiedClone;
	}

	/**
	 * Retrieves the type of this notification event.
	 * <br>
	 * Specifies how this event should be presented to the user.
	 * 
	 * @return {@link Type} of this event, never null.
	 */
	public Type getType()
	{
		return type;
	}

	/**
	 * Sets the type of this notification event.
	 * <br>
	 * Specifies how this event should be presented to the user.
	 * <p>
	 * This is a required value.
	 * 
	 * @param type the {@link Type} of this event, never null.
	 */
	public void setType(Type type)
	{
		if (log.isTraceEnabled())
			log.trace("setType(): " + type);
		assert (type != null);

		checkSeal();

		this.type = type;
	}

	/**
	 * Retrieves the weight of this notification.
	 * <br>
	 * This value is usually directly related to the weight in the
	 * {@link IEvaluationResult} which triggered this event.
	 * 
	 * @return the weight of this notification, always &gt;=0.
	 * 
	 * @see IEvaluationResult#getWeight()
	 */
	public double getWeight()
	{
		return weight;
	}

	/**
	 * Sets the weight of this notification.
	 * <br>
	 * This value is usually directly related to the weight in the
	 * {@link IEvaluationResult} which triggered this event.
	 * 
	 * @param weight the weight of this notification, always &gt;=0.
	 * 
	 * @see IEvaluationResult#getWeight()
	 */
	public void setWeight(double weight)
	{
		if (log.isTraceEnabled())
			log.trace("setWeight(): " + weight);
		assert (weight >= 0);

		checkSeal();

		this.weight = weight;
	}

	/**
	 * Retrieves the message for this notification.
	 * <br>
	 * This value is usually directly related to the message in the
	 * {@link IEvaluationResult} which triggered this event.
	 * 
	 * @return the message for this notification, may be NULL.
	 * 
	 * @see IEvaluationResult#getMessage()
	 */
	public String getMessage()
	{
		return message;
	}

	/**
	 * Retrieves the message for this notification.
	 * <br>
	 * This value is usually directly related to the message in the
	 * {@link IEvaluationResult} which triggered this event.
	 * 
	 * @param message the message for this notification, may be NULL.
	 */
	public void setMessage(String message)
	{
		if (log.isTraceEnabled())
			log.trace("setMessage(): " + message);

		checkSeal();

		this.message = message;
	}

	/*
	 * (non-Javadoc)
	 * @see org.electrocodeogram.cpc.core.api.hub.event.CPCEvent#isValid()
	 */
	@Override
	public boolean isValid()
	{
		if (modifiedClone == null || type == null || weight < 0)
			return false;

		return super.isValid();
	}

	/*
	 * (non-Javadoc)
	 * @see org.electrocodeogram.cpc.core.api.hub.event.CPCEvent#toString()
	 */
	@Override
	public String toString()
	{
		return "CloneNotificationEvent[type: " + type + ", weight: " + weight + ", msg: " + message + ", "
				+ subToString() + ", modifiedClone: " + modifiedClone + "]";
	}

}
