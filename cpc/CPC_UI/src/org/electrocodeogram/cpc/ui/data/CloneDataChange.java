package org.electrocodeogram.cpc.ui.data;


import org.electrocodeogram.cpc.core.api.data.IClone;
import org.electrocodeogram.cpc.core.api.data.ICloneGroup;


/**
 * Change event descriptor which is generated by the {@link CloneDataModel} and dispatched to all
 * registered {@link ICloneDataChangeListener}s to notify them about changes to the clone data
 * of the currently active document.<br/>
 * There are mainly two types of such events:
 * <ul>
 * 	<li>the clone data changed for some reason</li>
 *  <li>the user selected some clones in a view</li>
 * </ul>
 * However, these two types may also appear combined in one event.
 * 
 * @author vw
 */
public class CloneDataChange
{
	private IClone[] addedClones = null;
	private IClone[] updatedClones = null;
	private IClone[] removedClones = null;
	private ICloneGroup[] addedCloneGroups = null;
	private ICloneGroup[] updatedCloneGroups = null;
	private ICloneGroup[] removedCloneGroups = null;

	private IClone[] selectedClones = null;
	private String selectionOrigin = null;

	CloneDataChange()
	{

	}

	CloneDataChange(String selectionOrigin, IClone[] selectedClones)
	{
		assert (selectionOrigin != null && selectedClones != null && selectedClones.length > 0);

		this.selectionOrigin = selectionOrigin;
		this.selectedClones = selectedClones;
	}

	CloneDataChange(IClone[] addedClones, IClone[] updatedClones, IClone[] removedClones,
			ICloneGroup[] addedCloneGroups, ICloneGroup[] updatedCloneGroups, ICloneGroup[] removedCloneGroups)
	{
		this(addedClones, updatedClones, removedClones, addedCloneGroups, updatedCloneGroups, removedCloneGroups, null,
				null);
	}

	CloneDataChange(IClone[] addedClones, IClone[] updatedClones, IClone[] removedClones,
			ICloneGroup[] addedCloneGroups, ICloneGroup[] updatedCloneGroups, ICloneGroup[] removedCloneGroups,
			String selectionOrigin, IClone[] selectedClones)
	{
		assert ((selectionOrigin == null && selectedClones == null) || (selectionOrigin != null && selectedClones != null));

		this.addedClones = addedClones;
		this.updatedClones = updatedClones;
		this.removedClones = removedClones;
		this.addedCloneGroups = addedCloneGroups;
		this.updatedCloneGroups = updatedCloneGroups;
		this.removedCloneGroups = removedCloneGroups;
		this.selectionOrigin = selectionOrigin;
		this.selectedClones = selectedClones;
	}

	/**
	 * 
	 * @return MAY BE NULL
	 */
	public IClone[] getAddedClones()
	{
		return addedClones;
	}

	void setAddedClones(IClone[] addedClones)
	{
		this.addedClones = addedClones;
	}

	/**
	 * 
	 * @return MAY BE NULL
	 */
	public IClone[] getUpdatedClones()
	{
		return updatedClones;
	}

	void setUpdatedClones(IClone[] updatedClones)
	{
		this.updatedClones = updatedClones;
	}

	/**
	 * 
	 * @return MAY BE NULL
	 */
	public IClone[] getRemovedClones()
	{
		return removedClones;
	}

	void setRemovedClones(IClone[] removedClones)
	{
		this.removedClones = removedClones;
	}

	/**
	 * 
	 * @return MAY BE NULL
	 */
	public ICloneGroup[] getAddedCloneGroups()
	{
		return addedCloneGroups;
	}

	void setAddedCloneGroups(ICloneGroup[] addedCloneGroups)
	{
		this.addedCloneGroups = addedCloneGroups;
	}

	/**
	 * 
	 * @return MAY BE NULL
	 */
	public ICloneGroup[] getUpdatedCloneGroups()
	{
		return updatedCloneGroups;
	}

	void setUpdatedCloneGroups(ICloneGroup[] updatedCloneGroups)
	{
		this.updatedCloneGroups = updatedCloneGroups;
	}

	/**
	 * 
	 * @return MAY BE NULL
	 */
	public ICloneGroup[] getRemovedCloneGroups()
	{
		return removedCloneGroups;
	}

	void setRemovedCloneGroups(ICloneGroup[] removedCloneGroups)
	{
		this.removedCloneGroups = removedCloneGroups;
	}

	/**
	 * Unique string which identifies the origin of a selection change.<br/>
	 * <br/>
	 * This value is NULL if {@link CloneDataChange#getSelectedClones()} is NULL and
	 * non-NULL otherwise.
	 * 
	 * @return MAY BE NULL
	 */
	public String getSelectionOrigin()
	{
		return selectionOrigin;
	}

	/**
	 * An array of clones which were just selected in some clone view.<br/>
	 * <br/>
	 * If this value is non-NULL then {@link CloneDataChange#getSelectionOrigin()}
	 * is also non-NULL. Otherwise both are NULL.
	 * 
	 * @return MAY BE NULL
	 */
	public IClone[] getSelectedClones()
	{
		return selectedClones;
	}

	/**
	 * @return true if any of the clone data change/selection lists contains at least one element.
	 */
	public boolean containsData()
	{
		return ((addedClones != null) && (addedClones.length > 0))
				|| ((updatedClones != null) && (updatedClones.length > 0))
				|| ((removedClones != null) && (removedClones.length > 0))
				|| ((addedCloneGroups != null) && (addedCloneGroups.length > 0))
				|| ((updatedCloneGroups != null) && (updatedCloneGroups.length > 0))
				|| ((removedCloneGroups != null) && (removedCloneGroups.length > 0))
				|| ((selectedClones != null) && (selectedClones.length > 0));
	}

	/*
	 * (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString()
	{
		return "CloneDataChange[Clones: " + (addedClones != null ? addedClones.length : 0) + " added, "
				+ (updatedClones != null ? updatedClones.length : 0) + " updated, "
				+ (removedClones != null ? removedClones.length : 0) + " removed - Groups: "
				+ (addedCloneGroups != null ? addedCloneGroups.length : 0) + " added, "
				+ (updatedCloneGroups != null ? updatedCloneGroups.length : 0) + " updated, "
				+ (removedCloneGroups != null ? removedCloneGroups.length : 0) + " removed, "
				+ (selectedClones != null ? selectedClones.length : 0) + " selected, origin: " + selectionOrigin + "]";
	}
}
