<?xml version="1.0" encoding="UTF-8"?>

<!-- Buildfile for the ECG SensorShell component -->

<project name="ECG SensorShell" default="help" basedir=".">
	
	<!-- Project-wide settings. All directories are relative to the -->
	<!-- project root directory -->

	<!-- Project directories -->
	<property name="src.dir" value="src"/>
	
	<property name="dist.dir" value="dist"/>
		
	<property name="doc.dir" value="doc"/>
	
	<property name="lib.dir" value="lib"/>			
	
	<property name="bin.dir" value="bin"/>
	
	
	<!-- Temporary build directory names -->
	<property name="build.dir" value="build"/>
	
	<property name="build.classes" value="${build.dir}/classes"/>
	
	<property name="build.doc" value="${build.dir}/doc"/>
	
	<property name="build.lib" value="${build.dir}/lib"/>
	
	<!-- Classpath setting -->
	<path id="classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar/"/>
		</fileset>
		
		<fileset dir="e:/programme/eclipse 3.1RC3/plugins/org.junit_3.8.1/">
			<include name="junit.jar"/>
		</fileset>
		
	</path>

	
	<target name="help">
		<echo message="Build the ECG SensorShell component"/>
		<echo message="Usage: ant [ant options] target1 [ target2 | target3 | ... ]"/>
		<echo message=""/>
		<echo message="build - Build the ECG SensorShell component."/>
		<echo message="jar - build + Package the ECG SensorShell component into two JARs."/>
		<echo message="javadoc - Generate the API documentation."/>
		<echo message="clean - Delete class files built during previous builds. Leave directories."/>
		<echo message="cleanall - clean + Delete any created directories and their contents."/>
		<echo message="deploy - javadoc,build + Deploy the ECG SensorShell component."/>
		<echo message="all - deploy"/>
	</target>
	
	<!-- Target to create the build directories prior to a compile target -->
	<!-- The start time of the build is marked as well for the log -->
	<target name="prepare">

		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${build.lib}"/>
		<mkdir dir="${doc.dir}"/>
		
		<tstamp />
			<echo message="${TSTAMP}"/> 
		
	</target>
	
	<!-- Build the ECG SensorShell component. -->
	<target name="build" depends="prepare">
	
		<javac
			destdir="${build.dir}"
			srcdir="${src.dir}"
			source="1.5"
			debug="on"
			deprecation="on">
				
				<classpath refid="classpath" />

		</javac>
			
	</target>
	
	<!-- Package the ECG SensorShell component into two JARs. -->
	<target name="jar" depends="build">

			<jar
				compress="true"
				duplicate="fail"
				jarfile="${build.lib}/sensorshell.jar"
				basedir="${build.classes}"
				manifest="manifest.txt"/>

			<jar
				excludes="org/hackystat/"
				compress="true"
				duplicate="fail"
				jarfile="${build.lib}/event.jar"
				basedir="${build.classes}" />
	</target>
	
	<!-- This shall be the default target. -->
	<target name="all" depends="deploy"/>
	
	<!-- Generate the API documentation. -->
	<target name="javadoc" depends="build">
	
		<javadoc
			packagenames="org.*"
			sourcepath="${src.dir}"
			destdir="${doc.dir}">

			<classpath refid="classpath"/>
		
		</javadoc>
		
	</target>
	
	<!-- Delete class files built during previous builds. Leave directories. -->
	<target name="clean">
		
		<delete>
			<fileset dir="${build.classes}" includes="**/*.class"/>
		</delete>
		
	</target>
		
	<!-- Delete any created directories and their contents. -->
	<target name="cleanall" depends="clean">
	
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete dir="${doc.dir}"/>
		
	</target>
	
	<!-- Deploy the ECG SensorShell component. -->
	<target name="deploy" depends="jar">
		
		<!-- Create the distribuition directories -->
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${dist.dir}/lib"/>
		<mkdir dir="${dist.dir}/doc"/>
		
		<!-- Copy the libraries -->
		<copy todir="${dist.dir}/lib">
			
			<fileset dir="${build.lib}" includes="sensorshell.jar" />
			<fileset dir="${build.lib}" includes="event.jar" />
			
		</copy>
		
		<!-- Copy the documentation -->
		<copy todir="${dist.dir}/doc">
		
			<fileset dir="${doc.dir}"/>
		
		</copy>
	
	</target>
	
	<!-- Run the JUnit tests -->
	<target name="test" depends="build">
		
		<junit showoutput="on">
			
			<test name="org.electrocodegram.test.client.ClientTestSuite" />
			
		</junit>
		
	</target>

</project>

