<?xml version="1.0" encoding="UTF-8"?>

<!-- Buildfile for the Module-API and ECG Lab application -->

<project name="ECG Lab" basedir=".">

	<!-- Project-wide settings. All directories are relative to the -->
	<!-- project root directory -->

	<!-- Project directories -->
	<property name="src.dir" value="src"/>

	<property name="dist.dir" value="dist"/>

	<property name="doc.dir" value="doc"/>

	<property name="lib.dir" value="../ECG Build/dist/lib"/>
	
	<property name="hackylib.dir" value="../ECG Build/dist/lib/hackystat"/>
	
	<property name="locallib.dir" value="lib"/>

	<property name="module.dir" value="modules"/>

	<property name="msdt.dir" value="msdt"/>

	<property name="bin.dir" value="bin"/>


	<!-- Temporary build directory names -->
	<property name="build.dir" value="build"/>

	<property name="build.classes" value="${build.dir}/classes"/>

	<property name="build.doc" value="${build.dir}/doc"/>

	<property name="build.lib" value="${build.dir}/lib"/>

	<!-- Classpath setting -->
	<path id="classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar/"/>
		</fileset>
		
		<fileset dir="${hackylib.dir}">
			<include name="**/*.jar/"/>
		</fileset>
		
		<fileset dir="${locallib.dir}">
			<include name="**/*.jar/"/>
		</fileset>

		<fileset dir="e:/programme/eclipse 3.1/plugins/org.junit_3.8.1/">
			<include name="junit.jar"/>
		</fileset>

		

	</path>


	<!-- Target to create the build directories prior to a compile target -->
	<!-- The start time of the build is marked as well for the log -->
	<target name="prepare">

		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${build.lib}"/>
		<mkdir dir="${doc.dir}"/>

		<tstamp />
		<echo message="${TSTAMP}"/>

	</target>

	<!-- Build the Module-API and ECG Lab application. -->
	<target name="build" depends="prepare">

		<echo message="Building the Module-API and ECG Lab application..."/>

		<javac
			destdir="${build.classes}"
			srcdir="${src.dir}"
			source="1.5"
			debug="on"
			deprecation="on">

			<classpath refid="classpath" />

		</javac>

	</target>


	<!-- Package the ECG Lab into ecg_lab.jar. -->
	<target name="jarEcgLab" depends="build">

		<echo message="Packaging the ECG ServerAndLab application into ecg_lab.jar..."/>

		<jar
				compress="true"
				duplicate="fail"
				jarfile="${build.lib}/ecg_lab.jar"
				basedir="${build.classes}"
				manifest="manifest.txt"/>
	</target>

	<!-- Package the Module-API into ecg_moduleapi.jar -->
	<target name="jarModuleApi" depends="build">

		<echo message="Packaging the Module-API into ecg_moduleapi.jar..."/>

		<jar
					includes="org/electrocodeogram/module/*,
							org/electrocodeogram/module/intermediate/*,
							org/electrocodeogram/module/source/*,
							org/electrocodeogram/module/target/*,
							org/electrocodeogram/modulepackage/*,
							org/electrocodeogram/system/IModuleSystem.class*,
							org/electrocodeogram/system/ModuleSystem.class*,
							org/electrocodeogram/system/logging/*,
							org/electrocodeogram/module/event/*,
							org/electrocodeogram/msdt/*,
							org/electrocodeogram/event/*,
							org/electrocodeogram/ui/IGui.class,
							org/electrocodeogram/misc/xml/*,
							org/electrocodeogram/misc/constants/UIConstants.class,"
					compress="true"
					duplicate="fail"
					jarfile="${build.lib}/ecg_moduleapi.jar"
					basedir="${build.classes}" />
	</target>
	
	<!-- Delete class files built during previous builds. Leave directories. -->
	<target name="clean">

		<delete failonerror="no">
			<fileset dir="${build.classes}" includes="**/*.class"/>
		</delete>

	</target>

	<!-- Delete any created directories and their contents. -->
	<target name="cleanall" depends="clean">

		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete dir="${doc.dir}"/>
		<delete dir="${module.dir}"/>
		
		<delete failonerror="no">
			<fileset dir="${lib.dir}/ecg" includes="**/*.jar"/>
		</delete>

	</target>

	<!-- Deploy the ecg_lab.jar into ./dist/lib/. -->
	<target name="deployEcgLab" depends="jarEcgLab">

		<echo message="Deploying ecg_lab.jar..."/>

		<!-- Create the distribution directories -->
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${dist.dir}/lib"/>
		<mkdir dir="${dist.dir}/doc"/>

		<!-- Copy the libraries -->
		<copy todir="${dist.dir}/lib">

			<fileset dir="${build.lib}" includes="ecg_lab.jar" />

		</copy>

		<!-- Copy the documentation -->
		<copy todir="${dist.dir}/doc">

			<fileset dir="${doc.dir}"/>

		</copy>

	</target>

	<!-- Deploy the Module-API into ./dist/lib/. -->
	<target name="deployModuleApi" depends="jarModuleApi">

		<echo message="Deploying ecg_moduleapi.jar ..."/>

		<!-- Create the distribuition directories -->
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${dist.dir}/lib"/>
		<mkdir dir="${dist.dir}/doc"/>

		<!-- Copy the libraries -->
		<copy todir="${dist.dir}/lib">

			<fileset dir="${build.lib}" includes="ecg_moduleapi.jar" />

		</copy>

		<!-- Copy the documentation -->
		<copy todir="${dist.dir}/doc">

			<fileset dir="${doc.dir}"/>

		</copy>

		<!-- Copy the ecg_moduleapi.jar -->
		
		<copy todir="../ECG Build/dist/lib/">

			<fileset dir="${build.lib}" includes="ecg_moduleapi.jar" />

		</copy>

	</target>

	<!-- Assemble application -->
	<target name="Assemble ECGLab" depends="deployEcgLab">

		<echo message="Assembling ECG ServerAndLab application"/>

		<mkdir dir="${dist.dir}/application/"/>
		<mkdir dir="${dist.dir}/application/modules/"/>
		<mkdir dir="${dist.dir}/application/msdt/"/>
		<mkdir dir="${dist.dir}/application/lib/"/>

		<copy todir="${dist.dir}/application/">

			<fileset dir="${dist.dir}/lib/" includes="ecg_lab.jar" />

		</copy>
		
		<copy todir="${dist.dir}/application/">

			<fileset dir="." includes="ecg.bat" />

		</copy>
		
		<copy todir="${dist.dir}/application/">

			<fileset dir="." includes="ecg.sh" />

		</copy>
		
		<copy todir="${dist.dir}/application/modules/">

			<fileset dir="${module.dir}"/>

		</copy>

		<copy todir="${dist.dir}/application/">

			<fileset dir="." includes="socket.setup" />

		</copy>

		
		<copy todir="${dist.dir}/application/msdt/">

			<fileset dir="${msdt.dir}"/>

		</copy>
		
		<copy todir="${dist.dir}/application/lib/">

			<fileset dir="${locallib.dir}"/>

		</copy>
		
		<copy todir="${dist.dir}/application/lib/">

			<fileset dir="${lib.dir}"/>

		</copy>


	</target>
</project>

